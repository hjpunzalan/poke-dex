{"version":3,"sources":["card.js","App.js","serviceWorker.js","index.js"],"names":["Card","_this$props","this","props","id","name","type","experience","imageSource","concat","slice","splitNumber","react_default","a","createElement","className","src","alt","Component","pokemon","base_experience","App","map","el","src_card","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAgCeA,mLAfD,IAAAC,EAC8BC,KAAKC,MAAjCC,EADFH,EACEG,GAAGC,EADLJ,EACKI,KAAKC,EADVL,EACUK,KAAKC,EADfN,EACeM,WACfC,EAAW,6DAAAC,OAhBzB,SAAqBL,GASjB,OAPIA,EAAK,IACI,KAAOA,GAAIM,OAAO,GACpBN,EAAK,IAAMA,EAAK,KACd,IAAMA,GAAIM,OAAO,GAElBN,EASyEO,CAAYP,GAA5E,QACjB,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAgBV,GAC9BO,EAAAC,EAAAC,cAAA,OAAKE,IAAKR,EAAaS,IAAKZ,EAAMU,UAAU,aAC5CH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,SAAgCT,GAChCM,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAb,QAAqCR,WATlCW,aCZbC,SAAU,CACd,CAAEf,GAAI,EAAGC,KAAM,aAAcC,KAAM,OAAQc,gBAAiB,IAC5D,CAAEhB,GAAI,EAAGC,KAAM,WAAYC,KAAM,QAASc,gBAAiB,IAC3D,CAAEhB,GAAI,GAAIC,KAAM,UAAWC,KAAM,MAAOc,gBAAiB,IACzD,CAAEhB,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUc,gBAAiB,KAC/D,CAAEhB,GAAI,GAAIC,KAAM,UAAWC,KAAM,WAAYc,gBAAiB,KAC9D,CAAEhB,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUc,gBAAiB,IAC/D,CAAEhB,GAAI,GAAIC,KAAM,SAAUC,KAAM,SAAUc,gBAAiB,KAC3D,CAAEhB,GAAI,IAAKC,KAAM,QAASC,KAAM,SAAUc,gBAAiB,MAkB9CC,MAff,WACE,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,WACCI,EAAQG,IAAK,SAAAC,GACZ,OAAOX,EAAAC,EAAAC,cAACU,EAAD,CACPpB,GAAImB,EAAGnB,GACPC,KAAMkB,EAAGlB,KACTC,KAAMiB,EAAGjB,KACTC,WAAYgB,EAAGH,sBCZDK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5f07db6a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './card.css';\r\n\r\nfunction splitNumber(id) {\r\n    let newID;\r\n    if (id < 10) {\r\n        newID = ('00' + id).slice(-3);\r\n    } else if (id > 10 && id < 100) {\r\n        newID = ('0' + id).slice(-3);\r\n    } else {\r\n        newID = id;\r\n    }\r\n    return newID;\r\n}\r\n\r\n\r\nclass Card extends Component {\r\n    render () {\r\n        const { id,name,type,experience } = this.props;\r\n        const imageSource = `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${splitNumber(id)}.png`\r\n        return (\r\n            <div className=\"Card\">\r\n                <h2 className=\"card-heading\">{name}</h2>\r\n                <img src={imageSource} alt={name} className=\"card-img\"/>\r\n                <p className=\"card-type\">Type: {type}</p>\r\n                <p className=\"card-experience\">EXP: {experience}</p>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\nimport Card from './card';\nimport './App.css';\n\nconst pokemon = [\n  { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\n  { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\n  { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\n  { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\n  { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\n  { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\n  { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\n  { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <h1 className=\"heading-1\">Pokedex</h1>\n    {pokemon.map( el => {\n      return <Card \n      id={el.id} \n      name={el.name} \n      type={el.type} \n      experience={el.base_experience} />\n    })}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}